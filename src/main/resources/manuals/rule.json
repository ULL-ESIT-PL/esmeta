{
  "[YET] Append the pair (a two element List) consisting of _nextKey_ and _desc_ to the end of _descriptors_.": "push descriptors < (new [nextKey, desc])",
  "[YET] Append to _internalSlotsList_ the elements of _additionalInternalSlotsList_.": "internalSlotsList = (list-concat internalSlotsList additionalInternalSlotsList)",
  "[YET] Assert: The execution context stack has at least two elements.": "assert (< 1 @EXECUTION_STACK.length)",
  "[YET] Assert: The execution context stack is empty.": "assert (= @EXECUTION_STACK.length 0)",
  "[YET] Assert: The execution context stack is not empty.": "assert (! (= @EXECUTION_STACK.length 0))",
  "[YET] Assert: When we reach this step, _asyncContext_ has already been removed from the execution context stack and _prevContext_ is the currently running execution context.": "assert (&& (= prevContext @EXECUTION_STACK[0]) (! (= asyncContext @EXECUTION_STACK[0])))",
  "[YET] Assert: When we return here, _asyncContext_ has already been removed from the execution context stack and _runningContext_ is the currently running execution context.": "assert (&& (= runningContext @EXECUTION_STACK[0]) (! (= asyncContext @EXECUTION_STACK[0])))",
  "[YET] Assert: When we return here, _genContext_ has already been removed from the execution context stack and _callerContext_ is the currently running execution context.": "assert (&& (= callerContext @EXECUTION_STACK[0]) (! (= genContext @EXECUTION_STACK[0])))",
  "[YET] Assert: When we return here, _genContext_ has already been removed from the execution context stack and _methodContext_ is the currently running execution context.": "assert (= methodContext @EXECUTION_STACK[0])",
  "[YET] Assert: _F_ has a [[Promise]] internal slot whose value is an Object.": "assert (&& (! (= F.Promise absent)) (? F.Promise: \"Object\"))",
  "[YET] Assert: _F_ is an extensible object that does not have a *\"length\"* own property.": "assert (&& F.Extensible (= F.SubMap.length absent))",
  "[YET] Assert: _F_ is an extensible object that does not have a *\"name\"* own property.": "assert (&& F.Extensible (= F.SubMap.name absent))",
  "[YET] Assert: _F_ is an extensible object that does not have a *\"prototype\"* own property.": "assert (&& F.Extensible (= F.SubMap.prototype absent))",
  "[YET] Assert: _O_ is an Object that has a [[SyncIteratorRecord]] internal slot.": "assert (&& (? O: \"Object\") (! (= O.SyncIteratorRecord absent)))",
  "[YET] Assert: _O_ is an ordinary, extensible object with no non-configurable properties.": "assert (&& (? O: \"OrdinaryObject\") O.Extensible)",
  "[YET] Assert: _Receiver_ does not currently have a property _P_.": "assert (= Receiver.SubMap[P] absent)",
  "[YET] Assert: _base_ is finite and is neither *+0*<sub>ùîΩ</sub> nor *-0*<sub>ùîΩ</sub>.": "assert (! (|| (= base 0.0f) (= base -0.0f)))",
  "[YET] Assert: _calleeContext_ is now the running execution context.": "assert (= calleeContext @EXECUTION_STACK[0])",
  "[YET] Assert: _envRec_ does not already have a binding for _N_.": "assert (= envRec.SubMap[N] absent)",
  "[YET] Assert: _envRec_ has a binding for _N_.": "assert (! (= envRec.SubMap[N] absent))",
  "[YET] Assert: _exponent_ is finite and is neither *+0*<sub>ùîΩ</sub> nor *-0*<sub>ùîΩ</sub>.": "assert (! (|| (= exponent 0.0f) (= exponent -0.0f)))",
  "[YET] Assert: _genContext_ is the execution context of a generator.": "assert (? genContext: \"ExecutionContext\")",
  "[YET] Assert: _generatorBody_ is an Abstract Closure with no parameters.": "assert (? generatorBody: \"AbstractClosure\")",
  "[YET] Assert: _homeObject_ is an ordinary, extensible object with no non-configurable properties.": "assert (&& (? homeObject: \"OrdinaryObject\") homeObject.Extensible)",
  "[YET] Assert: _realm_.[[Intrinsics]].[[%ThrowTypeError%]] exists and has been initialized.": "assert (! (= realm.Intrinsics[\"%ThrowTypeError%\"] absent))",
  "[YET] Assert: _result_ is a normal completion with a value of *undefined*. The possible sources of completion values are Await or, if the async function doesn't await anything, step <emu-xref href=\"#step-asyncblockstart-return-undefined\"></emu-xref> above.": "(= result comp[~normal~/~empty~](undefined))",
  "[YET] Assert: _x_ and _y_ are both finite.": "(&& (! (|| (= x +INF) (= x -INF))) (! (|| (= y +INF) (= y -INF))))",
  "[YET] Create a mutable binding in _envRec_ for _N_ and record that it is uninitialized. If _D_ is *true*, record that the newly created binding may be deleted by a subsequent DeleteBinding call.": "{ envRec.SubMap[N] = (new MutableBinding(\"initialized\" -> false))  if (= D true) envRec.SubMap[N].maybeDeleted = true else {} }",
  "[YET] Create an own accessor property named _P_ of object _O_ whose [[Get]], [[Set]], [[Enumerable]], and [[Configurable]] attributes are set to the value of the corresponding field in _Desc_ if _Desc_ has that field, or to the attribute's <emu-xref href=\"#table-object-property-attributes\">default value</emu-xref> otherwise.": "{ let ap = (new PropertyDescriptor()) if (= Desc.Get absent) ap.Get = undefined else ap.Get = Desc.Get if (= Desc.Set absent) ap.Set = undefined else ap.Set = Desc.Set if (= Desc.Enumerable absent) ap.Enumerable = false else ap.Enumerable = Desc.Enumerable if (= Desc.Configurable absent) ap.Configurable = false else ap.Configurable = Desc.Configurable O.SubMap[P] = ap }",
  "[YET] Create an own data property named _P_ of object _O_ whose [[Value]], [[Writable]], [[Enumerable]], and [[Configurable]] attributes are set to the value of the corresponding field in _Desc_ if _Desc_ has that field, or to the attribute's <emu-xref href=\"#table-object-property-attributes\">default value</emu-xref> otherwise.": "{ let dp = (new PropertyDescriptor()) if (= Desc.Value absent) dp.Value = undefined else dp.Value = Desc.Value if (= Desc.Writable absent) dp.Writable = false else dp.Writable = Desc.Writable if (= Desc.Enumerable absent) dp.Enumerable = false else dp.Enumerable = Desc.Enumerable if (= Desc.Configurable absent) dp.Configurable = false else dp.Configurable = Desc.Configurable O.SubMap[P] = dp }",
  "[YET] Create any host-defined global object properties on _globalObj_.": "nop",
  "[YET] For each field of _Desc_, set the corresponding attribute of the property named _P_ of object _O_ to the value of the field.": "{ let fields = (keys Desc) let idx = 0 loop[repeat] (< idx fields.length) { let f = fields[idx] O.SubMap[P][f] = Desc[f] idx = (+ idx 1) } }",
  "[YET] For each property of the Global Object specified in clause <emu-xref href=\"#sec-global-object\"></emu-xref>, do\n  1. [YET] Let _name_ be the String value of the property name.\n  1. [YET] Let _desc_ be the fully populated data Property Descriptor for the property, containing the specified attributes for the property. For properties listed in <emu-xref href=\"#sec-function-properties-of-the-global-object\"></emu-xref>, <emu-xref href=\"#sec-constructor-properties-of-the-global-object\"></emu-xref>, or <emu-xref href=\"#sec-other-properties-of-the-global-object\"></emu-xref> the value of the [[Value]] attribute is the corresponding intrinsic object from _realmRec_.\n  1. Perform ? DefinePropertyOrThrow(_global_, _name_, _desc_).": "{ let keys = (keys @GLOBAL.SubMap) let idx = 0 loop[repeat] (< idx keys.length) { let name = keys[idx] global.SubMap[name] = @GLOBAL.SubMap[name] idx = (+ idx 1) } global.SubMap.globalThis = (new PropertyDescriptor(\"Value\" -> global, \"Writable\" -> true, \"Enumerable\" -> false, \"Configurable\" -> true)) }",
  "[YET] If _Desc_ does not have any fields, return *true*.": "{ let descKeys = (keys Desc) if (= descKeys.length 0) return true else {} }",
  "[YET] If _N_ is an element of _varNames_, remove that element from the _varNames_.": "remove-elem varNames N",
  "[YET] If _O_ does not have an own property with key _P_, return *undefined*.": "if (= O.SubMap[P] absent) return undefined else {}",
  "[YET] If _callerContext_ is not already suspended, suspend _callerContext_.": "nop",
  "[YET] If _child_ is an instance of _symbol_, return *true*.": "if (? child: symbol) return true else {}",
  "[YET] If _envRec_ has a binding for the name that is the value of _N_, return *true*.": "if (! (= envRec.SubMap[N] absent)) return true else {}",
  "[YET] If _genContext_ does not have a Generator component, return ~non-generator~.": "if (= genContext.Generator absent) return ~non-generator~ else {}",
  "[YET] If _runningContext_ is not already suspended, suspend _runningContext_.": "nop",
  "[YET] If _x_ and _y_ are both *true* or both *false*, return *true*; otherwise, return *false*.": "if (|| (&& (= x true) (= y true)) (&& (= x false) (= y false))) return true else return false",
  "[YET] If _x_ and _y_ are exactly the same sequence of code units (same length and same code units at corresponding indices), return *true*; otherwise, return *false*.": "if (= x y) return true else return false",
  "[YET] If all Job Queues are empty, the result is implementation-defined.": "if (= @JOB_QUEUE.length 0) return undefined else {}",
  "[YET] If no such execution context exists, return *null*. Otherwise, return _ec_'s ScriptOrModule.": "if (= ec absent) return null else return ec.ScriptOrModule",
  "[YET] If the binding for _N_ in _envRec_ is an uninitialized binding, throw a *ReferenceError* exception.": "if (! envRec.SubMap[N].initialized) return comp[~throw~/~empty~]((new OrdinaryObject(\"Prototype\" -> @EXECUTION_STACK[0].Realm.Intrinsics[\"%ReferenceError.prototype%\"], \"ErrorData\" -> undefined))) else {}",
  "[YET] If the execution context stack is empty, return *null*.": "if (= @EXECUTION_STACK.length 0) return null else {}",
  "[YET] If the host requires that the `this` binding in _realm_'s global scope return an object other than the global object, let _thisValue_ be such an object created in a host-defined manner. Otherwise, let _thisValue_ be *undefined*, indicating that _realm_'s global `this` binding should be the global object.": "let thisValue = undefined",
  "[YET] If the host requires use of an exotic object to serve as _realm_'s global object, let _global_ be such an object created in a host-defined manner. Otherwise, let _global_ be *undefined*, indicating that an ordinary object should be created as the global object.": "let global = undefined",
  "[YET] Insert _d_ as the first element of _functionsToInitialize_.": "push d > functionsToInitialize",
  "[YET] Insert _fn_ as the first element of _functionNames_.": "push fn > functionNames",
  "[YET] Let _X_ be _O_'s own property whose key is _P_.": "let X = O.SubMap[P]",
  "[YET] Let _args_ be the List of arguments that was passed to this function by [[Call]] or [[Construct]].": "let args = argumentsList",
  "[YET] Let _args_ be the _argumentsList_ that was passed to this function by [[Call]] or [[Construct]].": "let args = argumentsList",
  "[YET] Let _asyncContext_ be a copy of _runningContext_.": "let asyncContext = (copy runningContext)",
  "[YET] Let _contained_ be the result of _child_ Contains _symbol_.": "{ sdo-call result = child->Contains(symbol) let contained = result }",
  "[YET] Let _ec_ be the topmost execution context on the execution context stack whose ScriptOrModule component is not *null*.": "{ let ec = absent let idx = 0 loop[repeat] (&& (< idx @EXECUTION_STACK.length) (= ec absent)) { if (! (= @EXECUTION_STACK[idx].ScriptOrModule null) ) ec = @EXECUTION_STACK[idx] else {} idx = (+ idx 1) } }",
  "[YET] Let _entry_ be that PrivateElement.": "{ let elems = O.PrivateElements let idx = 0 loop[repeat] (< idx elems.length) { let elem = elems[idx] if (= elem.Key P) let entry = elem else {} idx = (+ idx 1) } }",
  "[YET] Let _existing_ be that PrivateElement.": "{ let elems = container let idx = 0 loop[repeat] (< idx elems.length) { let elem = elems[idx] if (= elem.Key element.Key) let existing = elem else {} idx = (+ idx 1) } }",
  "[YET] Let _func_ be a new built-in function object that, when called, performs the action described by _behaviour_ using the provided arguments as the values of the corresponding parameters specified by _behaviour_. The new function object has internal slots whose names are the elements of _internalSlotsList_, and an [[InitialName]] internal slot.": "{ let func = (new BuiltinFunctionObject()) func.Code = behaviour }",
  "[YET] Let _instantiatedVarNames_ be a copy of the List _parameterBindings_.": "let instantiatedVarNames = (copy parameterBindings)",
  "[YET] Let _int_ be the mathematical value whose sign is the sign of _number_ and whose magnitude is floor(abs(‚Ñù(_number_))).": "{ let int = (floor (abs ([math] number))) if (< number 0.0f) int = (* -1 int) else {} }",
  "[YET] Let _internalSlotsList_ be a List containing the names of all the internal slots that <emu-xref href=\"#sec-built-in-function-objects\"></emu-xref> requires for the built-in function object that is about to be created.": "let internalSlotsList = (new [\"Prototype\", \"Extensible\", \"Realm\", \"InitialName\"])",
  "[YET] Let _k_ be the smallest non-negative integer such that the code unit at index _k_ within _px_ is different from the code unit at index _k_ within _py_. (There must be such a _k_, for neither String is a prefix of the other.)": "{ let k = 0 loop[repeat] (= px[k] py[k]) k = (+ k 1) }",
  "[YET] Let _m_ be the integer that is the numeric value of the code unit at index _k_ within _px_.": "let m = ([math] px[k])",
  "[YET] Let _n_ be the integer that is the numeric value of the code unit at index _k_ within _py_.": "let n = ([math] py[k])",
  "[YET] Let _name_ be a new Private Name whose [[Description]] value is _dn_.": "let name = (new PrivateName(\"Description\" -> dn))",
  "[YET] Let _name_ be that Private Name.": "{ let idx = 0 loop[repeat] (< idx names.length) { let elem = names[idx] if (= elem.Description identifier) let name = elem else {} idx = (+ idx 1) } }",
  "[YET] Let _newLenDesc_ be a copy of _Desc_.": "let newLenDesc = (copy Desc)",
  "[YET] Let _nextPending_ be the PendingJob record at the front of _nextQueue_. Remove that record from _nextQueue_.": "let nextPending = (pop < @JOB_QUEUE)",
  "[YET] Let _nextQueue_ be a non-empty Job Queue chosen in an implementation-defined manner.": "let nextQueue = @JOB_QUEUE",
  "[YET] Let _obj_ be a newly created object with an internal slot for each name in _internalSlotsList_.": "{ let obj = (new Object()) let idx = 0 loop[repeat] (< idx internalSlotsList.length) { obj[internalSlotsList[idx]] = undefined idx = (+ idx 1) } }",
  "[YET] Let _opText_ be the sequence of Unicode code points associated with _assignmentOpText_ in the following table:\n  <figure>\n    <!-- emu-format ignore -->\n    <table class=\"lightweight-table\">\n    <tbody><tr><th> _assignmentOpText_ </th><th> _opText_       </th></tr>\n    <tr><td> `**=`              </td><td> `**`           </td></tr>\n    <tr><td> `*=`               </td><td> `*`            </td></tr>\n    <tr><td> `/=`               </td><td> `/`            </td></tr>\n    <tr><td> `%=`               </td><td> `%`            </td></tr>\n    <tr><td> `+=`               </td><td> `+`            </td></tr>\n    <tr><td> `-=`               </td><td> `-`            </td></tr>\n    <tr><td> `<<=`        </td><td> `<<`     </td></tr>\n    <tr><td> `>>=`        </td><td> `>>`     </td></tr>\n    <tr><td> `>>>=`    </td><td> `>>>` </td></tr>\n    <tr><td> `&=`           </td><td> `&`        </td></tr>\n    <tr><td> `^=`               </td><td> `^`            </td></tr>\n    <tr><td> `|=`               </td><td> `|`            </td></tr>\n    </tbody></table>\n  </figure>": "{ if (= assignmentOpText \"**=\") let opText = \"**\" else {} if (= assignmentOpText \"*=\") let opText = \"*\" else {} if (= assignmentOpText \"/=\") let opText = \"/\" else {} if (= assignmentOpText \"%=\") let opText = \"%\" else {} if (= assignmentOpText \"+=\") let opText = \"+\" else {} if (= assignmentOpText \"-=\") let opText = \"-\" else {} if (= assignmentOpText \"<<=\") let opText = \"<<\" else {} if (= assignmentOpText \">>=\") let opText = \">>\" else {} if (= assignmentOpText \">>>=\") let opText = \">>>\" else {} if (= assignmentOpText \"&=\") let opText = \"&\" else {} if (= assignmentOpText \"^=\") let opText = \"^\" else {} if (= assignmentOpText \"|=\") let opText = \"|\" else {} }",
  "[YET] Let _operation_ be the abstract operation associated with _opText_ and Type(_lnum_) in the following table:\n  <figure>\n    <!-- emu-format ignore -->\n    <table class=\"lightweight-table\">\n    <tbody><tr><th> _opText_       </th><th> Type(_lnum_) </th><th> _operation_                </th></tr>\n    <tr><td> `**`           </td><td> Number       </td><td> Number::exponentiate       </td></tr>\n    <tr><td> `*`            </td><td> Number       </td><td> Number::multiply           </td></tr>\n    <tr><td> `*`            </td><td> BigInt       </td><td> BigInt::multiply           </td></tr>\n    <tr><td> `/`            </td><td> Number       </td><td> Number::divide             </td></tr>\n    <tr><td> `%`            </td><td> Number       </td><td> Number::remainder          </td></tr>\n    <tr><td> `+`            </td><td> Number       </td><td> Number::add                </td></tr>\n    <tr><td> `+`            </td><td> BigInt       </td><td> BigInt::add                </td></tr>\n    <tr><td> `-`            </td><td> Number       </td><td> Number::subtract           </td></tr>\n    <tr><td> `-`            </td><td> BigInt       </td><td> BigInt::subtract           </td></tr>\n    <tr><td> `<<`     </td><td> Number       </td><td> Number::leftShift          </td></tr>\n    <tr><td> `<<`     </td><td> BigInt       </td><td> BigInt::leftShift          </td></tr>\n    <tr><td> `>>`     </td><td> Number       </td><td> Number::signedRightShift   </td></tr>\n    <tr><td> `>>`     </td><td> BigInt       </td><td> BigInt::signedRightShift   </td></tr>\n    <tr><td> `>>>` </td><td> Number       </td><td> Number::unsignedRightShift </td></tr>\n    <tr><td> `&`        </td><td> Number       </td><td> Number::bitwiseAND         </td></tr>\n    <tr><td> `&`        </td><td> BigInt       </td><td> BigInt::bitwiseAND         </td></tr>\n    <tr><td> `^`            </td><td> Number       </td><td> Number::bitwiseXOR         </td></tr>\n    <tr><td> `^`            </td><td> BigInt       </td><td> BigInt::bitwiseXOR         </td></tr>\n    <tr><td> `|`            </td><td> Number       </td><td> Number::bitwiseOR          </td></tr>\n    <tr><td> `|`            </td><td> BigInt       </td><td> BigInt::bitwiseOR          </td></tr>\n    </tbody></table>\n  </figure>": "if (? lnum: \"Number\") { if (= opText \"**\") let operation = clo<Number::exponentiate> else {} if (= opText \"*\") let operation = clo<Number::multiply> else {} if (= opText \"/\") let operation = clo<Number::divide> else {} if (= opText \"%\") let operation = clo<Number::remainder> else {} if (= opText \"+\") let operation = clo<Number::add> else {} if (= opText \"-\") let operation = clo<Number::subtract> else {} if (= opText \"<<\") let operation = clo<Number::leftShift> else {} if (= opText \">>\") let operation = clo<Number::signedRightShift> else {} if (= opText \">>>\") let operation = clo<Number::unsignedRightShift> else {} if (= opText \"&\") let operation = clo<Number::bitwiseAND> else {} if (= opText \"^\") let operation = clo<Number::bitwiseXOR> else {} if (= opText \"|\") let operation = clo<Number::bitwiseOR> else {} } else if (? lnum: \"BigInt\") { if (= opText \"*\") let operation = clo<BigInt::multiply> else {} if (= opText \"+\") let operation = clo<BigInt::add> else {} if (= opText \"-\") let operation = clo<BigInt::subtract> else {} if (= opText \"<<\") let operation = clo<BigInt::leftShift> else {} if (= opText \">>\") let operation = clo<BigInt::signedRightShift> else {} if (= opText \"&\") let operation = clo<BigInt::bitwiseAND> else {} if (= opText \"^\") let operation = clo<BigInt::bitwiseXOR> else {} if (= opText \"|\") let operation = clo<BigInt::bitwiseOR> else {} } else { }",
  "[YET] Let _privateName_ be the Private Name in _names_ whose [[Description]] is _privateIdentifier_.": "{ let idx = 0 loop[repeat] (< idx names.length) { let elem = names[idx] if (= elem.Description privateIdentifier) let privateName = elem else {} idx = (+ idx 1) } }",
  "[YET] Let _realmRec_ be a new Realm Record.": "let realmRec = @REALM",
  "[YET] Let _result_ be the Completion Record that is the result of evaluating _F_ in a manner that conforms to the specification of _F_. _thisArgument_ is the *this* value, _argumentsList_ provides the named parameters, and the NewTarget value is *undefined*.": "call result = F.Code(thisArgument, argumentsList, undefined)",
  "[YET] Let _sourceText_ be the source code of a script.": "let sourceText = @SOURCE_TEXT",
  "[YET] Once a generator enters the ~completed~ state it never leaves it and its associated execution context is never resumed. Any execution state associated with _generator_ can be discarded at this point.": "nop",
  "[YET] Perform any necessary implementation-defined initialization of _calleeContext_.": "nop",
  "[YET] Remove _asyncContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.": "(pop < @EXECUTION_STACK)",
  "[YET] Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.": "(pop < @EXECUTION_STACK)",
  "[YET] Remove _genContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.": "(pop < @EXECUTION_STACK)",
  "[YET] Remove the first element from _queue_.": "(pop < queue)",
  "[YET] Remove the first element from _remaining_.": "(pop < remaining)",
  "[YET] Remove the own property with name _P_ from _O_.": "delete O.SubMap[P]",
  "[YET] Replace _existing_ in _container_ with _combined_.": "{ let elems = container let idx = 0 loop[repeat] (< idx elems.length) { let elem = elems[idx] if (= elem existing) elems[idx] = combined else {} idx = (+ idx 1)} }",
  "[YET] Replace the property named _P_ of object _O_ with a data property whose [[Configurable]] and [[Enumerable]] attributes are set to _configurable_ and _enumerable_, respectively, and whose [[Value]] and [[Writable]] attributes are set to the value of the corresponding field in _Desc_ if _Desc_ has that field, or to the attribute's <emu-xref href=\"#table-object-property-attributes\">default value</emu-xref> otherwise.": "{ let dp2 = (new PropertyDescriptor(\"Configurable\" -> configurable, \"Enumerable\" -> enumerable)) if (= Desc.Value absent) dp2.Value = undefined else dp2.Value = Desc.Value if (= Desc.Writable absent) dp2.Writable = false else dp2.Writable = Desc.Writable O.SubMap[P] = dp2 }",
  "[YET] Replace the property named _P_ of object _O_ with an accessor property whose [[Configurable]] and [[Enumerable]] attributes are set to _configurable_ and _enumerable_, respectively, and whose [[Get]] and [[Set]] attributes are set to the value of the corresponding field in _Desc_ if _Desc_ has that field, or to the attribute's <emu-xref href=\"#table-object-property-attributes\">default value</emu-xref> otherwise.": "{ let ap2 = (new PropertyDescriptor(\"Configurable\" -> configurable, \"Enumerable\" -> enumerable)) if (=Desc.Get absent) ap2.Get = undefined else ap2.Get = Desc.Get if (= Desc.Set absent) ap2.Set = undefined else ap2.Set = Desc.Set O.SubMap[P] = ap2 }",
  "[YET] Resume the context that is now on the top of the execution context stack as the running execution context.": "nop",
  "[YET] Return a String according to <emu-xref href=\"#table-typeof-operator-results\"></emu-xref>.": "{ let t = (typeof val) if (= t @Undefined) return \"undefined\" else if (= t @Null) return \"object\" else if (= t @Boolean) return \"boolean\" else if (= t @Number) return \"number\" else if (= t @String) return \"string\" else if (= t @Symbol) return \"symbol\" else if (= t @BigInt) return \"bigint\" else if (= t @Object) if (= val.Call absent) return \"object\" else return \"function\" else assert false }",
  "[YET] Return a new unique Symbol value whose [[Description]] value is _descString_.": "return (new 'descString)",
  "[YET] Return an Iterator object (<emu-xref href=\"#sec-iterator-interface\"></emu-xref>) whose `next` method iterates over all the String-valued keys of enumerable properties of _O_. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.": "{ call %0 = clo<CreateForInIterator>(O) return %0 }",
  "[YET] Return an implementation-approximated Number value representing the result of raising ‚Ñù(_base_) to the ‚Ñù(_exponent_) power.": "return ([number] (** ([math] base) ([math] exponent)))",
  "[YET] Return the BigInt value that represents the negation of ‚Ñù(_x_).": "return ([bigint] (- ([math] x)))",
  "[YET] Return the String representation of this Number value using the radix specified by _radixMV_. Letters `a`-`z` are used for digits with values 10 through 35. The precise algorithm is implementation-defined, however the algorithm should be a generalization of that specified in <emu-xref href=\"#sec-numeric-types-number-tostring\"></emu-xref>.": "return ([str radixMV] x)",
  "[YET] Return the result of applying bitwise complement to _oldValue_. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.": "return (~ oldValue)",
  "[YET] Return the result of left shifting _lnum_ by _shiftCount_ bits. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.": "return ([number] (<< ([math] lnum) shiftCount))",
  "[YET] Return the result of performing a sign-extending right shift of _lnum_ by _shiftCount_ bits. The most significant bit is propagated. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.": "return ([number] (>> ([math] lnum) shiftCount))",
  "[YET] Return the result of performing a zero-filling right shift of _lnum_ by _shiftCount_ bits. Vacated bits are filled with zero. The mathematical value of the result is exactly representable as a 32-bit unsigned bit string.": "return ([number] (>>> ([math] lnum) shiftCount))",
  "[YET] Return the value currently bound to _N_ in _envRec_.": "return envRec.SubMap[N].BoundValue",
  "[YET] Set _obj_'s essential internal methods to the default ordinary object definitions specified in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"></emu-xref>.": "nop",
  "[YET] Set fields of _realmRec_.[[Intrinsics]] with the values listed in <emu-xref href=\"#table-well-known-intrinsic-objects\"></emu-xref>. The field names are the names listed in column one of the table. The value of each field is a new object value fully and recursively populated with property values as defined by the specification of each object in clauses <emu-xref href=\"#sec-global-object\"></emu-xref> through <emu-xref href=\"#sec-reflection\"></emu-xref>. All object property values are newly created object values. All values that are built-in function objects are created by performing CreateBuiltinFunction(_steps_, _length_, _name_, _slots_, _realmRec_, _prototype_) where _steps_ is the definition of that function provided by this specification, _name_ is the initial value of the function's `name` property, _length_ is the initial value of the function's `length` property, _slots_ is a list of the names, if any, of the function's specified internal slots, and _prototype_ is the specified value of the function's [[Prototype]] internal slot. The creation of the intrinsics and their properties must be ordered to avoid any dependencies upon objects that have not yet been created.": "realmRec.Intrinsics = @INTRINSICS",
  "[YET] append each of its elements to _internalSlotsList_.": "internalSlotsList = (list-concat internalSlotsList additionalInternalSlotsList)"
}
