def <CLO>:CreateArrayIterator:clo0(): Unknown {
  let index = 0
  loop[repeat] true {
    if (! (= array.TypedArrayName absent)) {
      call %0 = clo<IsDetachedBuffer>(array.ViewedArrayBuffer)
      if (= %0 true) {
        return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined)))
      } else {}
      let len = array.ArrayLength
    } else {
      call %1 = clo<LengthOfArrayLike>(array)
      let len = [? %1]
    }
    if (! (< index len)) {
      return comp[~normal~/~empty~](undefined) // BUG (reported in #2815)
    } else {}
    if (= kind ~key~) {
      call %2 = clo<CreateIterResultObject>(([number] index), false)
      call %3 = clo<GeneratorYield>(%2)
      [? %3]
    } else {
      call %4 = clo<ToString>(([number] index))
      let elementKey = [! %4]
      call %5 = clo<Get>(array, elementKey)
      let elementValue = [? %5]
      if (= kind ~value~) {
        call %6 = clo<CreateIterResultObject>(elementValue, false)
        call %7 = clo<GeneratorYield>(%6)
        [? %7]
      } else {
        assert (= kind ~key+value~)
        call %8 = clo<CreateArrayFromList>((new [([number] index), elementValue]))
        let result = %8
        call %9 = clo<CreateIterResultObject>(result, false)
        call %10 = clo<GeneratorYield>(%9)
        [? %10]
      }
    }
    index = (+ index 1)
  }
}
